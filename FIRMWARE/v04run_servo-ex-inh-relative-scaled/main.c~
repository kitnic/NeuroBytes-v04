/*
    Update 8/18/2015: Neuron is now NeuroBytes, which is part of NeuroTinker, LLC, a
    company formed by Joe Burdo and Zach Fredin. I need to make sure I'm doing everything
    right with the license, so I am leaving the stuff below this statement intact. Everything that
    started getting posted to github.com/zakqwy/NeuroBytes-v04 on or after today is covered by
    the following (with 'copyright' now spelled correctly):
	
	Copyright 2015, Zach Fredin
	zach@neurotinker.com 
																																																																							
    This is the firmware for a simple NeuroBytes Motor module. The ATtiny runs at 8 MHz; since 
    the code was written around v04 boards that use the internal RC oscillator, exact servo 
    start and end positions will vary as the pulse width won't be precisely 1 - 2 uS. As an 
    example, the NeuroBytes v04 board used for development required a timing constant of 8 * 964 
    to equal one millisecond, suggesting that that particular board was off by 3.6% (at least 
    compared to my never-been-calibrated-under-my-care 30-year-old oscilloscope).
 
    General specifications:
	Servo PWM duty cycle: 10 ms (100 Hz)
	Pulse Width Range: 1 to 2 ms
	Zero point: 1.5 ms
	Inputs: six (3 excitatory, 3 inhibitory) 

    File Name: /NeuroBytes-v04/FIRMWARE/v04run_servo_ex-inh
*/
 
/*
Copywrite 2014, Zach Fredin
zachary.fredin@gmail.com
Distributed under terms of the GNU General Public License, version 3

I wrote a decent amount of this code 8 months ago. Glad I (sort of) documented it,
as I haven't gone near AVR-C (or Neurons, for that matter) since then. The only modification
I've made to this program since last time is to change two inhibitory inputs to excitatory inputs.
*/

/*
    This file is part of Neuron.

    Neuron is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Neuron is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Neuron.  If not, see <http://www.gnu.org/licenses/>.
*/


#include <avr/io.h>
#include <avr/interrupt.h>

uint8_t inputStatus = 0b00000000;//current input status (read when stuff changes!)
uint16_t servoPosition = 0; //scaled between 0 and 1000; should really just use 100-900 to account for RC variations
uint16_t scalingFactor = 1000; //number of milliseconds in an IRL second (used to calibrate NeuroBytes to a servo; nominally 1000
uint16_t relaxSpeed = 35;

ISR(PCINT0_vect) { 	//interrupt svc routine called when PCINT0 changes state
	inputStatus = PINA;
}


ISR(TIM1_COMPA_vect) { //Called when TCNT1 == OCR1A
	PORTB = 0b00000111;
	PORTA = 0b00000000;
}

	
ISR(TIM1_COMPB_vect) { //Called when TCNT1 == OCR1B
	PORTB = 0b00000001;
	PORTA = 0b01000000;
	TCNT1 = 0;
	if (servoPosition > relaxSpeed) {
		servoPosition -= relaxSpeed;
	}
}
void SystemInit(void) {
	DDRA = 0b01000000; //IO config: PA0,1,2,3,4,5 in (dendrites), PA6 out (servo)
	PORTA = 0b00000000; //Turns off pull-up resistors on dendrites, sets axon low
	DDRB = 0b00000111; //IO config: PB0,1,2 out (LEDs), all others in
	PORTB = 0b00000111; //Sets PB0,1,2 high to start (LEDs off).
	TCCR1B = 0b00000010; //sets up a timer at 1MHz (or base AVR speed / 8)
	sei(); //enable all interrupts: same as changing bit 7 of SREG to 1
	GIMSK |= (1<<4);//sets the general input mask register's 4th bit to 1 to activate the PCIE0 interrupt stuff
	TIMSK1 = 0b00000110; // activates OCIE1A and OCIE1B: output compare match A and B 
	PCMSK0 = 0b00111111;	//sets the six dendrites to active hardware interrupts (0-5)
	OCR1A = scalingFactor;
	OCR1B = scalingFactor*20;
}

int main(void)
{
	SystemInit();
	for(;;){
		OCR1A = scalingFactor + servoPosition;
		if ((PINA & 0b00111111) > 0)  {
			servoPosition = 1000;
		}
	}
}
